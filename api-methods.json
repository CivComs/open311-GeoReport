{

	"default_format": "xml",

	"formats": [
		"xml"
	],

	"methods": {
	
		"open311.services.getList": {
			"description": "Provide a list of acceptable 311 service request types and their associated service codes. These request types can be unique to the city/jurisdiction",
			"enabled": 1,
			"documented": 1,
			"requires_auth": 0,
			"paginated": 1,
			"method": "GET",
			"slug" : "services.{format}",
			"parameters": [
				{ "name": "jurisdiction_id", "description": "A valid jurisdiction_id to get information about.", "required": 1 }
			],
			"response": [
			   {"name": "services", "description": "Root element."},
			   {"name": "service", "description": "Container for service_code, service_name, description, metadata, type, keywords, group."},
			   {"name": "service_code", "description": "The unique identifier for the service request type."},
			   {"name": "service_name", "description": "The human readable name of the service request type."},
			   {"name": "description", "description": "A brief description of the service request type."},
			   {"name": "metadata", "description": "Possible values: true, false", "bullets": 
			     [
			       "true: This service request type requires additional metadata so the client will need to make a call to the Service Definition method",
			       "false: No additional information is required and a call to the Service Definition method is not needed."
			     ]
			   },
			   {"name": "type", "description": "Possible values: realtime, batch, blackbox", "bullets":
			     [
			       "realtime: The service request ID will be returned immediately after the service request is submitted.",
			       "batch: A token will be returned immediately after the service request is submitted. This token can then be later used to return the service request ID.",
			       "blackbox: No service request ID will be returned after the service request is submitted."
			     ]
			   },
			   {"name": "keywords", "description": "A comma separated list of tags or keywords to help users identify the request type. This can provide synonyms of the service_name and group."},
			   {"name": "group", "description": "A category to group this service type within. This provides a way to group several service request types under one category such as \"sanitation\""}  
			],
			"possible_errors": [
			   {"status_code": "404", "description": " jurisdiction_id provided was not found (specify in error response)."},
			   {"status_code": "400", "description": "jurisdiction_id was not provided (specify in error response)."},
			   {"status_code": "400", "description": "General service error (Anything that fails during service list processing. The client will need to notify us)."}
			],
			"example" : "file://./api-methods-examples/open311.services.getList.json"
		},
		
		"open311.services.getInfo": {
			"description": "Defines attributes associated with a service code. These attributes can be unique to the city/jurisdiction. This call is only necessary if the Service selected has metadata set as true from the GET Services response.",
			"enabled": 1,
			"documented": 1,
			"requires_auth": 0,
			"method": "GET",
			"slug" : "services/{id}.{format}",
			"parameters": [
				{ "name": "service_code", "description": "A valid service_code to get information about.", "required": 1 },
				{ "name": "jurisdiction_id", "description": "A valid jurisdiction_id to get information about.", "required": 1 }
			],
			"response": [
			   {"name": "service_definition", "description": "Root element."},
			   {"name": "service_code", "description": "Returns the service_code associated with the definition, the same one submitted for this call."},
			   {"name": "attributes", "description": "Container for attribute."},
			   {"name": "variable", "description": "Options: true, false", "bullets": [
			     "true denotes that user input is needed.",
			     "false means the attribute is only used to present information to the user within the description field."
			   ]},
			   {"name": "code", "description": "A unique identifier for the attribute"},
			   {"name": "datatype", "description": "Denotes the type of field used for user input. Options: string, number, datetime, text, singlevaluelist, multivaluelist", "bullets": [
			     "string: A string of characters without line breaks. Represented in an HTML from using an <input> tag",
			     "number: A numeric value. Represented in an HTML from using an <input> tag",
			     "datetime: The input generated must be able to transform into a valid ISO 8601 date. Represented in an HTML from using <input> tags",
			     "text: A string of characters that may contain line breaks. Represented in an HTML from using an <textarea> tag",
			     "singlevaluelist: A set of predefined values (specified in this response) where only one value may be selected. Represented in an HTML from using the <select> and <option> tags",
			     "multivaluelist: A set of predefined values (specified in this response) where several values may be selected. Represented in an HTML from using the <select multiple=\"multiple\"> and <option> tags"
			   ]},
			   {"name": "required", "description": "Setting true means that the value is required to submit service request.  Options: true, false."},
			   {"name": "datatype_description", "description": "A description of the datatype which helps the user provide their input."},
			   {"name": "order", "description": "The sort order that the attributes will be presented to the user. 1 is shown first.  Options: Any positive integer not used for other attributes in the same service_code."},
			   {"name": "description", "description": "A description of the attribute field with instructions for the user to find and identify the requested information."},
			   {"name": "values", "description": "A container for a list of predefined options for singlevaluelist or multivaluelist. Required if datatype is set to singlevaluelist or multivaluelist."},
			   {"name": "value", "description": "A container for a predefined option (key and name) for singlevaluelist or multivaluelist."},
			   {"name": "key", "description": "The unique identifier associated with an option for singlevaluelist or multivaluelist. This is analogous to the value attribute in an html option tag."},
			   {"name": "name", "description": "The human readable title of an option for singlevaluelist or multivaluelist. This is analogous to the innerhtml text node of an html option tag."}
			],
			"possible_errors": [
			   {"status_code": "404", "description": "service_code or jurisdiction_id provided were not found (specify in error response)."},
			   {"status_code": "400", "description": "service_code or jurisdiction_id was not provided (specify in error response)."},
			   {"status_code": "400", "description": "General service error (Anything that fails during service list processing. The client will need to notify us)."}
			],
			"example" : "file://./api-methods-examples/open311.services.getInfo.json"
		},

		"open311.statuses.getList": {
			"description": "Return a list of valid statuses for incidents. The types of statuses and their meaning are left to the discretion of individual cities.",
			"enabled": 1,
			"documented": 1,
			"paginated": 1,
			"method": "GET",
			"slug": "{foo}",
			"requires_auth": 0,
			"example" : "file://./api-methods-examples/open311.incidents.getStatuses.json"
		},
				
		"open311.incidents.report": {
			"description": "Report an incident for a given service. Returns a unique ID for the incident that may be used to call the _open311.incidents.status_ API method.",
			"enabled": 1,
			"documented": 1,
			"method": "POST",
			"slug" : "requests.xml",
			"requires_auth": 1,
			"parameters": [
				{ "name": "service_id", "description": "A valid service_id as defined by the city operating the Open 311 (Simple) API", "required": 1 },
				{ "name": "latitude", "description": "A valid WGS84 coordinate", "required": 1 },
				{ "name": "longitude", "description": "A valid WGS84 coordinate", "required": 1 },
				{ "name": "description", "description": "A free-form text field in which the user reporting the incident may leave additional notes.", "required": 0}
			],
			"notes": [
				"All dates should be passed in using the [W3C DateTime format](http://www.w3.org/TR/NOTE-datetime) format.",
				"All geographic data is expected to be using the unprojected [WGS84](http://spatialreference.org/ref/epsg/4326/) datum (read: plain old latitudes and longitudes)."
			],
			"example" : "file://./api-methods-examples/open311.incidents.report.json"
		},
		
		"open311.incidents.getInfo": {
			"description": "",
			"enabled": 1,
			"documented": 1,
			"requires_auth": 0,
			"method": "GET",
			"slug" : "requests/{id}.{format}",
			"parameters": [
				{ "name": "incident_id", "description": "The unique ID of the incident to get information about.", "required": 1 }
			],
			"notes": [
				"All dates are recorded using the [W3C DateTime format](http://www.w3.org/TR/NOTE-datetime) format.",
				"All geographic data is returned using the unprojected [WGS84](http://spatialreference.org/ref/epsg/4326/) datum (read: plain old latitudes and longitudes)."
			],
			"example" : "file://./api-methods-examples/open311.incidents.getInfo"
		},
		
		"open311.incidents.search": {
			"description": "Returns a list of incidents matching a search criteria as defined by the API request.",
			"enabled": 1,
			"documented": 1,
			"paginated": 1,
			"method": "GET",
			"slug" : "requests.{format}",
			"requires_auth": 0,
			"parameters": [
				{ "name": "service_id", "description": "The unique ID of the service type to search for. Multiple services may be passed in as a comma-separated list.", "required": 0 },
				{ "name": "incident_id", "description": "The unique ID of the incident to search for. Multiple incidents may be passed in as a comma-separated list.", "required": 0 },
				{ "name": "status_id", "description": "The unique ID of a status type to search for. Multiple statuses may be passed in as a comma-separated list.", "required": 0 },
				{ "name": "created", "description": "The date or date range (see [api.md](https://github.com/straup/open311-simple/blob/master/api.md) for details) of when an incident was reported.", "required": 0 },
				{ "name": "modified", "description": "The date or date range (see [api.md](https://github.com/straup/open311-simple/blob/master/api.md) for details) of when an incident was last modified.", "required": 0 },
				{ "name": "where", "description": "A geopgraphic location or extent (see [api.md]((https://github.com/straup/open311-simple/blob/master/api.md) for details) for details) in which to scope the query.", "required": 0 }
			],
			"notes": [
				"All dates should be passed to the API (and returned in results) using the [W3C DateTime format](http://www.w3.org/TR/NOTE-datetime).",
				"All geographic data should be passed to the API using the unprojected [WGS84](http://spatialreference.org/ref/epsg/4326/) datum (read: plain old latitudes and longitudes).",
				"If called with a valid OAuth token and signature then the query will be scoped to the user associated with that token.",
				"Parameterless searches are not permitted. You must define at least one search criteria."
			],
			"example": "file://./api-methods-examples/open311.incidents.search.json"
		},

		"open311.where.getList": {
			"description": "Returns a list of geographic prefixes that may be used to query for incident reports using the 'open311.incidents.search' API method.",
			"enabled": 1,
			"documented": 1,
			"requires_auth": 0,
			"paginated": 1,
			"method": "GET",
			"slug" : "{foo}",
			"example" : "file://./api-methods-examples/open311.where.getList.json"
		}
		
	}
}
